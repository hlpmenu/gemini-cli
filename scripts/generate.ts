#!/usr/bin/env bun

/**
 * @license
 * Copyright 2025 HLMPN AB
 * SPDX-License-Identifier: Apache-2.0
 */

import { mkdir } from 'node:fs/promises';
import { $ } from 'bun';

const generateCommitInfo = async () => {
  const root = process.cwd();
  const scriptPath = (() => {
    const p = new URL(import.meta.url).pathname;
    return p.startsWith(root) ? p.slice(root.length + 1) : p;
  })();

  const generatedCliDir = `${root}/packages/cli/src/generated`;
  const generatedCoreDir = `${root}/packages/core/src/generated`;
  const cliGitCommitFile = `${generatedCliDir}/git-commit.ts`;
  const coreGitCommitFile = `${generatedCoreDir}/git-commit.ts`;

  await mkdir(generatedCliDir, { recursive: true });
  await mkdir(generatedCoreDir, { recursive: true });

  let gitCommitInfo = 'N/A';
  try {
    const out = await $`git rev-parse --short HEAD`.text();
    gitCommitInfo = out.trim() || 'N/A';
  } catch {
    // leave as "N/A"
  }

  let cliVersion = 'UNKNOWN';
  try {
    const pkg = await Bun.file(`${root}/packages/cli/package.json`).json();
    cliVersion = pkg?.version ?? 'UNKNOWN';
  } catch {
    // leave as "UNKNOWN"
  }

  const fileContent = `/**
 * @license
 * Copyright ${new Date().getFullYear()} HLMPN AB
 * SPDX-License-Identifier: Apache-2.0
 */

// This file is auto-generated by the build script (${scriptPath})
// Do not edit this file manually.
export const GIT_COMMIT_INFO = '${gitCommitInfo}';
export const CLI_VERSION = '${cliVersion}';
`;

  await Bun.write(cliGitCommitFile, fileContent);
  await Bun.write(coreGitCommitFile, fileContent);
};

const usage = () => {
  console.error('Usage: bun generate --commit-info');
  console.error('Options:');
  console.error('  --commit-info   Generate git-commit.ts for CLI and Core');
};

const main = async () => {
  const args = process.argv.slice(2);
  const allowed = new Set(['--commit-info']);

  if (args.length === 0) {
    usage();
    process.exit(2);
  }

  const unknown = args.filter((a) => a.startsWith('-') && !allowed.has(a));
  if (unknown.length) {
    console.error(`Unknown option(s): ${unknown.join(', ')}`);
    usage();
    process.exit(1);
  }

  if (args.length !== 1) {
    console.error('Only a single option is allowed.');
    usage();
    process.exit(1);
  }

  if (args[0] === '--commit-info') {
    await generateCommitInfo();
    return;
  }

  // Shouldn't reach here if parsing above is correct
  usage();
  process.exit(2);
};

await main();
