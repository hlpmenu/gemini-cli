name: 'hlmpn Release'

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'The version to release (e.g., v0.1.0).'
        required: true
        type: string
      ref:
        description: 'The branch, tag, or commit SHA to release from.'
        required: true
        type: string
        default: 'main'
      dry_run:
        description: 'If true, runs all steps without publishing to npm or creating a GitHub release.'
        required: true
        type: boolean
        default: true

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write       # To create commits, tags, and releases
      id-token: write       # To authenticate with npm via trusted publisher
      issues: write         # To create an issue on failure
    outputs:
      RELEASE_TAG: ${{ steps.version.outputs.RELEASE_TAG }}

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event.inputs.ref }}
          fetch-depth: 0   # Required to get all tags for versioning

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: '1.2.x'    # any Bun 1.2.* version

      - name: Setup Node.js for Publishing
        uses: actions/setup-node@v5
        with:
          node-version: '24.x'    # any Node.js 24.* version
          cache: 'bun'
          registry-url: 'https://registry.npmjs.org/'
          scope: '@hlmpn'

      - name: Install Dependencies
        run: bun i --frozen-lockfile

      - name: Derive Release Versions
        id: version
        run: |
          RELEASE_TAG="${{ inputs.version }}"
          # The npm version should not have the 'v' prefix.
          RELEASE_VERSION="${RELEASE_TAG#v}"
          NPM_TAG="latest"
          # If the version string contains a prerelease identifier, tag it accordingly on npm
          if [[ "${RELEASE_TAG}" == *"-"* ]]; then
            NPM_TAG="next"
          fi
          PREVIOUS_TAG=$(git describe --tags --abbrev=0)
          echo "RELEASE_TAG=${RELEASE_TAG}" >> "${GITHUB_OUTPUT}"
          echo "RELEASE_VERSION=${RELEASE_VERSION}" >> "${GITHUB_OUTPUT}"
          echo "NPM_TAG=${NPM_TAG}" >> "${GITHUB_OUTPUT}"
          echo "PREVIOUS_TAG=${PREVIOUS_TAG}" >> "${GITHUB_OUTPUT}"

      - name: Run Pre-flight Checks (Lint, Test, Build)
        run: bun run preflight

      - name: Configure Git User
        run: |
          git config user.name "hlmpn-release-bot"
          git config user.email "bot@users.noreply.github.com"

      - name: Create and Switch to Release Branch
        id: release_branch
        if: ${{ !inputs.dry_run }}
        run: |
          BRANCH_NAME="release/${{ steps.version.outputs.RELEASE_TAG }}"
          git switch -c "${BRANCH_NAME}"
          echo "BRANCH_NAME=${BRANCH_NAME}" >> "${GITHUB_OUTPUT}"

      - name: Update Package Versions
        run: bun run release:version "${{ steps.version.outputs.RELEASE_VERSION }}"

      - name: Commit and Push Version Bump
        if: ${{ !inputs.dry_run }}
        run: |
          git add .
          git commit -m "chore(release): ${{ steps.version.outputs.RELEASE_TAG }}"
          git push --set-upstream origin ${{ steps.release_branch.outputs.BRANCH_NAME }} --follow-tags

      - name: Rebuild All Packages with New Version
        run: |
          bun run build
          bun run prepare:package  # Prepares packages for publishing (e.g., copies README, etc.)

      - name: Publish @hlmpn/gemini-cli-core to npm
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_PUBLISH_TOKEN }}
        run: |
          npm publish \
            --workspace="@hlmpn/gemini-cli-core" \
            --tag="${{ steps.version.outputs.NPM_TAG }}" \
            ${{ inputs.dry_run && '--dry-run' || '' }}

      - name: Publish @hlmpn/gemini-cli to npm
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_PUBLISH_TOKEN }}
        run: |
          npm publish \
            --workspace="@hlmpn/gemini-cli" \
            --tag="${{ steps.version.outputs.NPM_TAG }}" \
            ${{ inputs.dry_run && '--dry-run' || '' }}

      - name: Create GitHub Release and Tag
        if: ${{ !inputs.dry_run }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_BRANCH: ${{ steps.release_branch.outputs.BRANCH_NAME }}
        run: |
          gh release create "${{ steps.version.outputs.RELEASE_TAG }}" \
            bundle/gemini.js \
            --target "${RELEASE_BRANCH}" \
            --title "Release ${{ steps.version.outputs.RELEASE_TAG }}" \
            --notes-start-tag "${{ steps.version.outputs.PREVIOUS_TAG }}" \
            --generate-notes

      - name: Create Issue on Failure
        if: ${{ failure() && !inputs.dry_run }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh issue create \
            --title "Release Failed for ${{ steps.version.outputs.RELEASE_TAG }}" \
            --body "The release workflow failed. See the run for details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
            --label "bug,release-failure"
